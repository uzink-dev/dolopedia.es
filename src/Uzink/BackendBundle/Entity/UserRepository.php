<?php

namespace Uzink\BackendBundle\Entity;

use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
use Knp\DoctrineBehaviors\ORM as ORMBehaviors;
use Symfony\Component\Form\Exception\InvalidArgumentException;

/**
 * BaseUserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class UserRepository extends NestedTreeRepository
{
    /**
     * Find Users by role
     *
     * @param $role
     * @param null|\Uzink\BackendBundle\Entity\User $user
     * @param bool $strict
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function findUsersByRoleQB($role, User $user = null, $strict = false) {
        $roles = User::getUpperRoles($role);
        if ($role == 'ROLE_USER') $role = array();
        else  $role = array($role);

        $qb = $this->createQueryBuilder('u');

        if (!$strict) {
            $orQB = $qb->expr()->orX();
            foreach($roles as $key => $currentRole) {
                $orQB->add($qb->expr()->in('u.roles', ':role'.$key));
                $qb->setParameter(':role'.$key, array($currentRole), 'array');
            }
            $qb->where($orQB);
        } else {
            $qb->where($qb->expr()->in('u.roles', ':role'))
               ->setParameter(':role', $role, 'array');
        }

        $qb->addOrderBy('u.name', 'ASC')
           ->addOrderBY('u.surname1', 'ASC')
           ->addOrderBY('u.surname2', 'ASC');

        if ($user) {
            $orQB = $qb->expr()->orX();
            $orQB->add($qb->expr()->eq('u.parent', ':user'));
            $orQB->add($qb->expr()->eq('u', ':user'));
            $qb->andWhere($orQB)
               ->setParameter('user', $user);
        }

        return $qb;
    }

    public function findUsersByRole($role, $user = null, $strict = false) {
        $qb = $this->findUsersByRoleQB($role, $user, $strict);

        return $qb->getQuery()->getResult();
    }

    public function findChildrenByRole($role, User $user) {
        if (!User::isRole($role)) throw new InvalidArgumentException('User Repository [findChildrenByRole]: Role must be valid');
        $users = array();

        $currentUserRole = $user->getRole();
        if ($currentUserRole == $role) $users[] = $user;

        $childrenUsers = $user->getChildren();

        foreach($childrenUsers as $childrenUser) {
            $returnedUsers = $this->findChildrenByRole($role, $childrenUser);
            if (count($returnedUsers)) $users = array_merge($users, $returnedUsers);
        }

        return $users;
    }

    public function findChildrenByRoleQB($role, User $user) {
        $users = $this->findChildrenByRole($role, $user);

        $qb = $this->createQueryBuilder('u');

        $qb->where($qb->expr()->in('u', ':users'))
           ->setParameter(':users', $users, 'array');

        return $qb;
    }

    public function findUsersWithFavourite(Article $article) {
        $qb = $this->createQueryBuilder('u');
        $qb->where(':article MEMBER OF u.favouritesArticles')
            ->setParameter(':article', $article);

        $results = $qb->getQuery()->getResult();
        return $results;
    }

    public function moreFollowedUsers() {
        $queryBuilder = $this->createQueryBuilder('u');
        $queryBuilder
            ->addSelect('COUNT(f) AS HIDDEN followers')
            ->leftJoin('u.followers', 'f')
            ->groupBy('u.id')
            ->orderBy('followers', 'DESC')
            ->addOrderBy('u.name', 'ASC')
            ->setMaxResults(4);

        return $queryBuilder->getQuery()->getResult();
    }

    public function findInTeamUsers() {

        $qb = $this->createQueryBuilder('u');

        $orQB = $qb->expr()->orX();

        $orQB->add($qb->expr()->in('u.roles', ':role_super'));
        $qb->setParameter(':role_super', array(User::ROLE_SUPER_ADMIN), 'array');

        $orQB->add($qb->expr()->in('u.roles', ':role_admin'));
        $qb->setParameter(':role_admin', array(User::ROLE_ADMIN), 'array');

        $orQB->add($qb->expr()->isNotNull(('u.parent')));

        $qb->where($orQB);

        $results = $qb->getQuery()->getResult();

        $idList = array();

        foreach ($results as $user) {
            $idList[] = intval($user->getId());
        }

        return $idList;
    }

    public function findGridUsers($filters)
    {
        $queryBuilder = $this->createQueryBuilder('u');
        $queryBuilder
            ->addOrderBy('u.surname1', 'ASC')
            ->addOrderBy('u.name', 'ASC')
            ->addOrderBy('u.email', 'ASC');

        if ($filters['name']) {
            $queryBuilder
                ->andWhere($queryBuilder->expr()->like('u.name', ':name'))
                ->setParameter('name', '%' . $filters['name'] . '%');
        }
        if ($filters['surnames']) {
            $orQuery = $queryBuilder->expr()->orX();
            $orQuery->add($queryBuilder->expr()->like('u.surname1', ':surnames'));
            $orQuery->add($queryBuilder->expr()->like('u.surname2', ':surnames'));
            $queryBuilder
                ->andWhere($orQuery)
                ->setParameter('surnames', '%' . $filters['surnames'] . '%');
        }
        if ($filters['email']) {
            $queryBuilder
                ->andWhere($queryBuilder->expr()->like('u.email', ':email'))
                ->setParameter('email', '%' . $filters['email'] . '%');
        }
        if ($filters['createdAtFrom']) {
            /** @var \DateTime $datetime */
            $datetime = $filters['createdAtFrom'];
            $datetime->setTime(0, 0, 0);

            $queryBuilder
                ->andWhere($queryBuilder->expr()->gte('u.createdAt', ':datetimeFrom'))
                ->setParameter('datetimeFrom', $datetime);
        }
        if ($filters['createdAtTo']) {
            /** @var \DateTime $datetime */
            $datetime = $filters['createdAtTo'];
            $datetime->setTime(23, 59, 59);

            $queryBuilder
                ->andWhere($queryBuilder->expr()->lte('u.createdAt', ':datetimeTo'))
                ->setParameter('datetimeTo', $datetime);
        }
        if ($filters['role']) {
            if ($filters['role'] == 'ROLE_USER') {
                $role = array();

                $queryBuilder
                    ->andWhere($queryBuilder->expr()->eq('u.roles', ':role'))
                    ->setParameter(':role', $role, 'array');
            }
            else  {
                $role = array($filters['role']);

                $queryBuilder
                    ->andWhere($queryBuilder->expr()->in('u.roles', ':role'))
                    ->setParameter(':role', $role, 'array');
            }
        }

        return $queryBuilder->getQuery();
    }
}
